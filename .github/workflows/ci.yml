name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

jobs:
  # Detect which files have changed to determine which tests to run
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      server: ${{ steps.filter.outputs.server }}
      web: ${{ steps.filter.outputs.web }}
      docs: ${{ steps.filter.outputs.docs }}
      scripts: ${{ steps.filter.outputs.scripts }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          base: main
          filters: |
            server:
              - '**.go'
              - 'go.mod'
              - 'go.sum'
              - 'config/**'
              - 'client/**'
              - 'console/**'
              - 'echonet_lite/**'
              - 'protocol/**'
              - 'server/**'
              - 'integration/**'
            web:
              - 'web/src/**'
              - 'web/package*.json'
              - 'web/tsconfig*.json'
              - 'web/vite.config.ts'
              - 'web/vitest.config.ts'
              - 'web/postcss.config.js'
              - 'web/tailwind.config.js'
              - 'web/eslint.config.ts'
              - 'web/index.html'
              - 'web/public/**'
            docs:
              - '**.md'
              - 'docs/**'
              - '.vscode/**'
              - 'systemd/**'
              - '.github/**'
            scripts:
              - 'script/**/*.sh'
  go-server:
    name: Go Server Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true'

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "1.24"

      - name: Cache Go modules
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-v2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-v2-

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted properly:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run tests
        run: go test -v -race -timeout=2m -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@af09b5e394c93991b95a5e7646aeb90c1917f78f # v5.5.1
        with:
          file: ./coverage.out
          flags: go-server
          name: go-server-coverage

  web-ui:
    name: Web UI Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'

    defaults:
      run:
        working-directory: ./web

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./web/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check
        run: npm run typecheck

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@af09b5e394c93991b95a5e7646aeb90c1917f78f # v5.5.1
        with:
          file: ./web/coverage/lcov.info
          flags: web-ui
          name: web-ui-coverage

  shell-scripts:
    name: Shell Scripts Quality
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.scripts == 'true'

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Run shellcheck
        uses: ludeeus/action-shellcheck@00cae500b08a931fb5698e11e79bfbd38e612a38 # 2.0.0
        with:
          scandir: './script'
          format: gcc
          severity: info
        env:
          SHELLCHECK_OPTS: -e SC1091

  # Optional: Integration test job that depends on both
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, go-server, web-ui, shell-scripts]
    # Run if any tests ran (server, web, or scripts)
    if: |
      always() &&
      (needs.changes.outputs.server == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.scripts == 'true') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: "1.24"

      - name: Cache Go modules
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-v2-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-v2-

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./web/package-lock.json"

      - name: Build Go server
        run: go build -o echonet-list

      - name: Build Web UI (for integration tests)
        run: |
          cd web
          npm ci
          npm run build
          cd ..

          # Verify bundle exists
          if [ ! -d "web/bundle" ]; then
            echo "ERROR: web/bundle directory not found after build"
            ls -la web/
            exit 1
          fi

          echo "✅ Web bundle built successfully:"
          ls -la web/bundle/

      - name: Run integration tests
        run: |
          # Double-check bundle exists before running tests
          if [ ! -d "web/bundle" ]; then
            echo "CRITICAL ERROR: web/bundle missing before integration tests"
            exit 1
          fi

          # Run integration tests
          go test -v -tags=integration -timeout=5m ./integration/tests/...

  # Summary job that provides a single status check for branch protection
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, go-server, web-ui, shell-scripts, integration]
    if: always()

    steps:
      - name: Check CI Results
        run: |
          echo "Checking CI results..."
          echo "Server changes: ${{ needs.changes.outputs.server }}"
          echo "Web changes: ${{ needs.changes.outputs.web }}"
          echo "Scripts changes: ${{ needs.changes.outputs.scripts }}"
          echo "Docs only: ${{ needs.changes.outputs.docs }}"

          # Check if any tests were supposed to run
          if [[ "${{ needs.changes.outputs.server }}" == "true" || "${{ needs.changes.outputs.web }}" == "true" || "${{ needs.changes.outputs.scripts }}" == "true" ]]; then
            echo "Tests were executed. Checking results..."
            
            # Check if any job failed
            if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
              echo "❌ CI failed: One or more tests failed"
              exit 1
            fi
            
            # Check if any job was cancelled
            if [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
              echo "⚠️ CI cancelled: One or more jobs were cancelled"
              exit 1
            fi
            
            echo "✅ All tests passed!"
          else
            echo "✅ No code changes detected - skipping tests"
          fi

          echo "CI completed successfully!"
