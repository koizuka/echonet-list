name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  # Run tests when Dependabot creates PRs
  pull_request_target:
    branches: [ main, master ]

jobs:
  # Detect which files have changed to determine which tests to run
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.filter.outputs.server }}
      web: ${{ steps.filter.outputs.web }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
    - uses: actions/checkout@v4
    
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          server:
            - '**.go'
            - 'go.mod'
            - 'go.sum'
            - 'config/**'
            - 'client/**'
            - 'console/**'
            - 'echonet_lite/**'
            - 'protocol/**'
            - 'server/**'
          web:
            - 'web/src/**'
            - 'web/package*.json'
            - 'web/tsconfig*.json'
            - 'web/vite.config.ts'
            - 'web/vitest.config.ts'
            - 'web/postcss.config.js'
            - 'web/tailwind.config.js'
            - 'web/eslint.config.ts'
            - 'web/index.html'
            - 'web/public/**'
          docs:
            - '**.md'
            - 'docs/**'
            - '.vscode/**'
            - 'systemd/**'
            - '.github/**'
  go-server:
    name: Go Server Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.server == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage.out
        flags: go-server
        name: go-server-coverage

  web-ui:
    name: Web UI Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.web == 'true'
    
    defaults:
      run:
        working-directory: ./web
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './web/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run typecheck
    
    - name: Run tests
      run: npm test
    
    - name: Build application
      run: npm run build
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        file: ./web/coverage/lcov.info
        flags: web-ui
        name: web-ui-coverage

  # Optional: Integration test job that depends on both
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, go-server, web-ui]
    # Run if either server or web tests ran (at least one of them)
    if: |
      always() && 
      (needs.changes.outputs.server == 'true' || needs.changes.outputs.web == 'true') &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './web/package-lock.json'
    
    - name: Build Go server
      run: go build -o echonet-list
    
    - name: Build Web UI
      run: |
        cd web
        npm ci
        npm run build
    
    - name: Run integration tests
      run: |
        echo "Integration tests would run here"
        # Future: Add actual integration tests

  # Summary job that provides a single status check for branch protection
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [changes, go-server, web-ui, integration]
    if: always()
    
    steps:
    - name: Check CI Results
      run: |
        echo "Checking CI results..."
        echo "Server changes: ${{ needs.changes.outputs.server }}"
        echo "Web changes: ${{ needs.changes.outputs.web }}"
        echo "Docs only: ${{ needs.changes.outputs.docs }}"
        
        # Check if any tests were supposed to run
        if [[ "${{ needs.changes.outputs.server }}" == "true" || "${{ needs.changes.outputs.web }}" == "true" ]]; then
          echo "Tests were executed. Checking results..."
          
          # Check if any job failed
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "❌ CI failed: One or more tests failed"
            exit 1
          fi
          
          # Check if any job was cancelled
          if [[ "${{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            echo "⚠️ CI cancelled: One or more jobs were cancelled"
            exit 1
          fi
          
          echo "✅ All tests passed!"
        else
          echo "✅ No code changes detected - skipping tests"
        fi
        
        echo "CI completed successfully!"